module wagmint::dex_integration;

use std::string::String;
use sui::balance::{Self, Balance};
use sui::coin::{Self, Coin, TreasuryCap};
use sui::event;
use sui::object::{Self, UID};
use sui::sui::SUI;
use sui::transfer;
use sui::tx_context::{Self, TxContext};
use wagmint::coin_manager::{Self, CoinInfo};
use wagmint::token_launcher::{Self, Launchpad};

// Error codes
const E_NOT_GRADUATED: u64 = 0;
const E_NOT_CREATOR: u64 = 1;
const E_DEX_ALREADY_PREPARED: u64 = 2;
const E_INSUFFICIENT_PAYMENT: u64 = 3;
const E_INSUFFICIENT_LIQUIDITY: u64 = 4;

// DEX preparation structure
public struct DEXListing<phantom T> has key, store {
    id: UID,
    coin_info_id: address,
    sui_amount: u64,
    token_amount: u64,
    creator: address,
    prepared: bool,
}

// Events
public struct DEXListingPreparedEvent has copy, drop {
    coin_address: address,
    dex_listing_id: address,
    sui_amount: u64,
    token_amount: u64,
    creator: address,
}

public struct DEXListingExecutedEvent has copy, drop {
    coin_address: address,
    dex_listing_id: address,
    sui_amount: u64,
    token_amount: u64,
    creator: address,
}

// Prepare for DEX listing after graduation
public entry fun prepare_dex_listing<T>(
    coin_info: &CoinInfo<T>,
    launchpad: &Launchpad,
    payment: &mut Coin<SUI>,
    token_amount: u64,
    ctx: &mut TxContext,
) {
    // Check if token has graduated
    assert!(coin_manager::has_graduated(coin_info), E_NOT_GRADUATED);

    // Only creator can prepare DEX listing
    assert!(coin_manager::get_creator(coin_info) == tx_context::sender(ctx), E_NOT_CREATOR);

    // Calculate fee (graduation fee from launchpad)
    let graduation_fee = token_launcher::get_graduation_fee(launchpad);

    // Ensure payment covers fee
    assert!(coin::value(payment) >= graduation_fee, E_INSUFFICIENT_PAYMENT);

    // Process fee payment
    let fee_payment = coin::split(payment, graduation_fee, ctx);
    transfer::public_transfer(fee_payment, token_launcher::get_admin(launchpad));

    // Create DEX listing object
    let dex_listing = DEXListing<T> {
        id: object::new(ctx),
        coin_info_id: object::id_address(coin_info),
        sui_amount: 0, // Will be updated when liquidity is added
        token_amount,
        creator: tx_context::sender(ctx),
        prepared: false,
    };

    // Emit event
    event::emit(DEXListingPreparedEvent {
        coin_address: object::id_address(coin_info),
        dex_listing_id: object::id_address(&dex_listing),
        sui_amount: 0,
        token_amount,
        creator: tx_context::sender(ctx),
    });

    // Share the DEX listing object
    transfer::share_object(dex_listing);
}

// Add liquidity for DEX listing
public entry fun add_liquidity<T>(
    dex_listing: &mut DEXListing<T>,
    payment: Coin<SUI>,
    ctx: &mut TxContext,
) {
    // Only creator can add liquidity
    assert!(dex_listing.creator == tx_context::sender(ctx), E_NOT_CREATOR);

    // Ensure not already prepared
    assert!(!dex_listing.prepared, E_DEX_ALREADY_PREPARED);

    // Update SUI amount
    dex_listing.sui_amount = dex_listing.sui_amount + coin::value(&payment);

    // Transfer SUI to the DEX listing module (could be modified to send to DEX directly)
    transfer::public_transfer(payment, dex_listing.creator);

    // Mark as prepared if both token and SUI amounts are provided
    if (dex_listing.sui_amount > 0 && dex_listing.token_amount > 0) {
        dex_listing.prepared = true;

        // Emit event for prepared DEX listing
        event::emit(DEXListingPreparedEvent {
            coin_address: dex_listing.coin_info_id,
            dex_listing_id: object::id_address(dex_listing),
            sui_amount: dex_listing.sui_amount,
            token_amount: dex_listing.token_amount,
            creator: dex_listing.creator,
        });
    }
}

// Execute DEX listing (would integrate with external DEX)
public entry fun execute_dex_listing<T>(
    dex_listing: &mut DEXListing<T>,
    tokens: Coin<T>,
    ctx: &mut TxContext,
) {
    // Only creator can execute
    assert!(dex_listing.creator == tx_context::sender(ctx), E_NOT_CREATOR);

    // Ensure prepared
    assert!(dex_listing.prepared, E_DEX_ALREADY_PREPARED);

    // Verify token amount
    assert!(coin::value(&tokens) >= dex_listing.token_amount, E_INSUFFICIENT_LIQUIDITY);

    // Here you would integrate with your chosen DEX, for example:
    // 1. Call DEX integration functions
    // 2. Add liquidity to DEX pool
    // 3. Create liquidity positions for creator

    // For now, just return the tokens to creator (replace with actual DEX integration)
    transfer::public_transfer(tokens, dex_listing.creator);

    // Emit execution event
    event::emit(DEXListingExecutedEvent {
        coin_address: dex_listing.coin_info_id,
        dex_listing_id: object::id_address(dex_listing),
        sui_amount: dex_listing.sui_amount,
        token_amount: dex_listing.token_amount,
        creator: dex_listing.creator,
    });
}

// View functions
public fun get_dex_listing_info<T>(listing: &DEXListing<T>): (address, u64, u64, address, bool) {
    (
        listing.coin_info_id,
        listing.sui_amount,
        listing.token_amount,
        listing.creator,
        listing.prepared,
    )
}

public fun is_prepared<T>(listing: &DEXListing<T>): bool {
    listing.prepared
}

public fun get_token_amount<T>(listing: &DEXListing<T>): u64 {
    listing.token_amount
}

public fun get_sui_amount<T>(listing: &DEXListing<T>): u64 {
    listing.sui_amount
}

// Only for testing
#[test_only]
public fun create_test_dex_listing<T>(
    coin_info_id: address,
    token_amount: u64,
    ctx: &mut TxContext,
): DEXListing<T> {
    DEXListing<T> {
        id: object::new(ctx),
        coin_info_id,
        sui_amount: 0,
        token_amount,
        creator: tx_context::sender(ctx),
        prepared: false,
    }
}

#[test_only]
public fun set_prepared<T>(listing: &mut DEXListing<T>, prepared: bool) {
    listing.prepared = prepared;
}
